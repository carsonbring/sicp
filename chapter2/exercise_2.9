(import (chibi))
(define (make-interval a b) (cons a b))

(define (lowerbound i) (min (car i) (cdr i)))
(define (upperbound i) (max (car i) (cdr i)))
(define (add-interval x y)
  (make-interval (+ (lowerbound x) (lowerbound y)) (+ (upperbound x) (upperbound y))))

(define (mul-interval x y) 
  (let ((p1 (* (lowerbound x) (lowerbound y)))
        (p2 (* (lowerbound x) (upperbound y)))
        (p3 (* (upperbound x) (lowerbound y)))
        (p4 (* (upperbound x) (upperbound y)))
        )
    (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))
  )
)
(define (div-interval x y)
  (mul-interval x (make-interval (/ 1.0 (upperbound y)) (/ 1.0 (lowerbound y))))
)
(define (sub-interval x y)
 (make-interval (- (lowerbound x)
                    (upperbound y))
                 (- (upperbound x)
                    (lowerbound y))))

(define (width interval) 
  (/ (+ (upperbound interval) (lowerbound interval)) 2)
)

(let ((int1 (make-interval 2 4)) (int2 (make-interval 7 19)))
  ; Width of adding intervals is the same as adding the the two width of both intervals
  (display (+ (width int1) (width int2)))
  (newline)
  (newline)
  (display (width (add-interval int1 int2)))
  (newline)
  ; Doesn't work for multiplication
  (newline)
  (display (* (width int1) (width int2)))
  (newline)
  (newline)
  (display (width (mul-interval int1 int2)))


)
