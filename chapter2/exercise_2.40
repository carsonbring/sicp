; 06/16/24
(import (chibi))
(define (enumerate-interval init n)
  (if (> init n) '()
    (append (list init) (enumerate-interval (+ init 1) n)))
)
(define (square x) (* x x))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
    ((= (modulo n test-divisor) 0) test-divisor)
    (else (find-divisor n (+ test-divisor 1)))
  )
)
(define (smallest-divisor n)
  (find-divisor n 2)
)
(define (prime? x)
  (= (smallest-divisor x) x)
)
(define (filter condit seq)
  (cond ((null? seq) '())
    ((condit (car seq)) (append (list (car seq)) (filter condit (cdr seq))))
    (else (filter condit (cdr seq)))
  )
)
(define (accumulate op init seq)
  (if (null? seq) init (op (car seq) (accumulate op init (cdr seq))))
)

(define (flatmap proc seq)
  (accumulate append '() (map proc seq))
)
(define (unique-pairs n) 
  (flatmap (lambda  (i) (map (lambda (j) (list i j)) (enumerate-interval 1 (- n 1)))) (enumerate-interval 1 n))
)
(define (prime-sum? pair)
    (prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
    (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n)
  (map make-pair-sum (filter prime-sum? (unique-pairs n)))
)
(display (prime-sum-pairs 5))

