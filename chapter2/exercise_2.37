; 06/15/24 
(import (chibi))
(define (accumulate op init seq)
  (if (null? seq) init (op (car seq) (accumulate op init (cdr seq))))
)

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
   '()
   (cons (accumulate op init (map (lambda (x) (car x)) seqs))  (accumulate-n op init (map (lambda (x) (cdr x)) seqs)))
  )
)

(define (dot-product v w)
  (accumulate + 0 (map * v w)) 
)

(define (matrix-*-vector m v)
  (map (lambda (x) (accumulate + 0 (accumulate-n * 1 (list x v)))) m)
)
(define (transpose mat)
 (accumulate-n cons '() mat)
)
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
   (map (lambda (x) (matrix-*-vector cols x)) m)
  )
)
(let ((m (list (list 1 -1 2) (list 0 -3 1)))
      (v (list 2 1 0)))

  (display (matrix-*-vector m v))
  (newline)
  (display m)
  (newline)
  (display (transpose m))
  (newline)
  (display (matrix-*-matrix (list (list 0 4 -2) (list -4 -3 0)) (list (list 0 1) (list 1 -1) (list 2 3))))
)
