(import (chibi))

(define (accumulate-filter combiner null-value term a next b filter)
  (if (> a b)
    null-value
    (if (filter a)  (combiner (term a) (accumulate-filter combiner null-value term (next a) next b filter) )
      (combiner null-value  (accumulate-filter combiner null-value term (next a) next b filter) )
    )
  )
)

(define (prime? x) 
  (define (square x) (* x x))
  (define (prime-iter a)
    (cond ((= a 1) (prime-iter (+ a 1)))
      ((> (square a) x) x)
      ((= (modulo x a) 0) a)
      (else (prime-iter (+ a 1)))
    )
  )
  (if (= x 1)
    #f
    (= (prime-iter 2) x)
  )
)

(define (sum-of-primes a b )
  (define (inc x) (+ x 1))
  (define (identity x) x)
  (define (comb x y) (+ x y))
  (accumulate-filter comb 0 identity a inc b prime? )  
)
(display (sum-of-primes 1 20))

(define (gcd a b)
  (if (= b 0)
    a
    (gcd b (modulo a b))
  )
)
(define (sum-of-relative-prime n)
  (define (inc x) (+ x 1))
  (define (identity x) x)
  (define (comb x y) (+ x y))
  (define (gcd a b)
    (if (= b 0)
      a
      (gcd b (modulo a b))
    )
  )
  (define (gcd-filter x)
    (= (gcd x n) 1)
  )
  (accumulate-filter comb 0 identity 1 inc n gcd-filter)
)
(display "\n")
(display (sum-of-relative-prime 20) )
