(import (chibi))
(define (accumulate combiner null-value term a next b)
  (if (> a b)
    null-value
    (combiner (term a) (accumulate combiner null-value term (next a) next b))
  )
)
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a result) (if (> a b) result (iter (next a) (combiner (term a) result))))
  (iter a null-value)
)

(define (sum term a next b)
  (define (comb x y) (+ x y))
  (accumulate comb 0 term a next b)
)

(define (product term a next b)
  (define (comb x y) (* x y))
  (accumulate comb 1 term a next b)
)

(define (inc x) (+ x 1))
(define (identity x) x )

(define (factorial n)
  (product identity 1 inc n)
)

(display (factorial 5))
