;2024-08-03
#lang sicp

(define (let-get-vars exp) (map car (cadr exp)))
(define (let-get-exp exp) (map cadr (cadr exp)))
(define (let-get-body exp) (caddr exp))
(define (let->combination exp)  (eval ((make-lambda (let-get-vars exp) (let-get-body exp)) (let-get-exp exp)) env))

(define (let*->nested-lets exp )
  (define (make-nested-let current-var current-exp rest-var rest-exp)
    (cond ((null? rest) ((make-lambda current-var (let-get-body exp)) current-exp))
          (else ((make-lambda current-var (make-nested-let (car rest-var) (car rest-exp) (cdr rest-var) (cdr rest-exp))) current-exp)))
    )
  (let ((vars (let-get-vars exp))
        (exps (let-get-exp exp)))
    (make-nested-let (car vars) (car exps) (cdr vars) (cdr exps))
    )
  )
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((let*? exp) (eval (let*->nested-lets exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))
