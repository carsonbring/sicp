; 2024-07-23
#lang sicp

;Consider the sequence of expressions

(define sum 0)
(define (accum x)
  (set! sum (+ x sum))
  sum)
(define seq (stream-map accum (stream-enumerate-interval 1 20)))
(define y (stream-filter even? seq))
(define z (stream-filter (lambda (x) (= (remainder x 5) 0))
                         seq))
(stream-ref y 7)
(display-stream z)

;What is the value of sum after each of the above expressions is evaluated? What is the printed response to evaluating the stream-ref and display-stream expressions? Would these responses differ if we had implemented (delay <exp>) simply as (lambda () <exp>) without using the optimization provided by memo-proc ? Explain.

;The value of sum after seq is defined would be
; 1 because accum would only be executed for the car of the stream generated by stream-enumerate-interval

;The value of sum after y is defined would be 6 because it stream-filter would go tthe first instance of an even number - which would be 2 in this scenario - and would call the accum on the car of the list (which would be 2).

; the value of sum after z is executed would be 15 because it would have to go to 5 which would mean that sum would have to be accumulated for each of the new head of lists that stream-filter would have to make in order to get to a valid car for the filter (5).


; The responses would differ if we had changed to a memoized delay function. 
