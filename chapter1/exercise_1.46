(import (chibi))
(define (iterative-improve good-enough? improve)
  (lambda (x)
    (if (good-enough? x ) x ((iterative-improve good-enough? improve) (improve x)))
  ) 
)
(define (square x) (* x x))
(define (average x y)
  (/ (+ x y) 2))

(define (sqrt x)
  (define (good-enough guess)
    (< (abs (- (square guess) x)) 0.001)
  )
  (define (improve guess)
    (average guess (/ x guess)) 
  )
  ((iterative-improve good-enough improve) 1.0)
)

(define tolerance .000005)
(define (fixed-point f first-guess)
  (define (close-enough? guess)
    (< (abs (- guess (f guess) )) tolerance)
  )
  (define (next guess)
    (f guess)
  )
  ((iterative-improve close-enough? next) first-guess)
)
(display (sqrt 2))
(newline)
(display (fixed-point cos 1.0))
