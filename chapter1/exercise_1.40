(import (chibi))
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (display "Guess: ")
      (display next)
      (newline)
      (if (close-enough? guess next )
        next
        (try next))))
  (try first-guess)
)

(define (newtons-method g guess)
  (let ((dx 0.00001)) 
    (define (deriv f)
      (lambda (x) (/ (- (f (+ x dx)) (f x)) dx))
    )
    (define (newton-transform g)
      (lambda (x) (- x (/ (g x) ((deriv g) x))))
    )
    (fixed-point (newton-transform g) guess)
  )
)

(define (power a b)
  (if (= b 0) 1 (* a (power a (- b 1))))
)
(define (cubic a b c)
  (lambda (x) (+ (power x 3) (* a (power x 2)) (* b x) c))
)
(display (newtons-method (cubic 2 2 1) 1))
