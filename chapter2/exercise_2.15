(import (chibi))
(define (make-interval a b) (cons a b))
(define (lowerbound x ) (min (cdr x) (car x)))
(define (upperbound x ) (max (cdr x) (car x)))
(define (make-center-percent center percent)
  (cons (- center (* center (/ percent 100))) (+ center (* center (/ percent 100))))
)
(define (center i)  
  (/ (+ (lowerbound i) (upperbound i)) 2)
)
(define (percent i)
  (/ (- (upperbound i) (center i)) (center i) )
)
(define (mul-interval x y) 
  (let ((p1 (* (lowerbound x) (lowerbound y)))
        (p2 (* (lowerbound x) (upperbound y)))
        (p3 (* (upperbound x) (lowerbound y)))
        (p4 (* (upperbound x) (upperbound y)))
        )
    (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))
  )
)

(define (add-interval x y)
  (make-interval (+ (lowerbound x) (lowerbound y)) (+ (upperbound x) (upperbound y))))

(define (div-interval x y)
  (if (or (and (< 0 (upperbound x)) (> 0 (lowerbound x)) (and (< 0 (upperbound y)) (> 0 (lowerbound y)))))
    (error "Intervals cross 0")
    
    (mul-interval x (make-interval (/ 1.0 (upperbound y)) (/ 1.0 (lowerbound y))))
  )
)
(define (sub-interval x y)
 (make-interval (- (lowerbound x)
                    (upperbound y))
                 (- (upperbound x)
                    (lowerbound y))))

(define (print-cp-int a)
  (newline)
  (display (center a))
  (display " +/- ")
  (display (* (percent a) 100))
  (display "%")
  (newline)
)
(define (simple-mul-interval x y)
  (make-center-percent (* (center x) (center y)) (+ (percent x) (percent y)))
)

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2) (add-interval r1 r2))
)
(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one (add-interval (div-interval one r1) (div-interval one r2)))
  )
)
; Lem is right, these are pretty far off when it comes to the percentage tolerance
(let ((int-a (make-center-percent 9.2 1)) (int-b (make-center-percent 6.5 3)))
  (display (print-cp-int (par1 int-a int-b)))
  (display (print-cp-int (par2 int-a int-b)))
)
